consumes:
- application/json
definitions:
  models.Bid:
    properties:
      amount:
        type: number
      user:
        $ref: '#/definitions/models.ShortUserData'
    type: object
  models.Category:
    properties:
      name:
        example: Category
        type: string
      slug:
        example: category_slug
        type: string
    type: object
  models.Listing:
    properties:
      active:
        type: boolean
      auctioneer:
        $ref: '#/definitions/models.ShortUserData'
      bids_count:
        type: integer
      category:
        type: string
      closing_date:
        type: string
      desc:
        type: string
      highest_bid:
        type: number
      image:
        type: string
      name:
        type: string
      price:
        type: number
      slug:
        type: string
      time_left_seconds:
        type: integer
      watchlist:
        type: boolean
    type: object
  models.Review:
    properties:
      reviewer:
        $ref: '#/definitions/models.ShortUserData'
      text:
        example: This is a nice review
        type: string
    type: object
  models.ShortUserData:
    properties:
      avatar:
        example: https://my-avatar.com
        type: string
      name:
        example: John Doe
        type: string
    type: object
  models.SiteDetail:
    properties:
      address:
        example: 234, Lagos, Nigeria
        type: string
      email:
        example: johndoe@email.com
        type: string
      fb:
        example: https://facebook.com
        type: string
      ig:
        example: https://instagram.com
        type: string
      name:
        type: string
      phone:
        example: "+2348133831036"
        type: string
      tw:
        example: https://twitter.com
        type: string
      wh:
        example: https://wa.me/2348133831036
        type: string
    type: object
  models.Subscriber:
    properties:
      email:
        example: johndoe@email.com
        minLength: 5
        type: string
    required:
    - email
    type: object
  models.User:
    properties:
      email:
        example: johndoe@email.com
        minLength: 5
        type: string
      first_name:
        example: John
        maxLength: 50
        type: string
      last_name:
        example: Doe
        maxLength: 50
        type: string
      password:
        example: strongpassword
        maxLength: 50
        minLength: 8
        type: string
      terms_agreement:
        type: boolean
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  schemas.AddOrRemoveWatchlistResponseDataSchema:
    properties:
      guestuser_id:
        type: string
    type: object
  schemas.AddOrRemoveWatchlistResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.AddOrRemoveWatchlistResponseDataSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.AddOrRemoveWatchlistSchema:
    properties:
      slug:
        example: listing_slug
        type: string
    required:
    - slug
    type: object
  schemas.BidResponseDataSchema:
    properties:
      bids:
        items:
          $ref: '#/definitions/models.Bid'
        type: array
      listing:
        type: string
    type: object
  schemas.BidResponseSchema:
    properties:
      data:
        $ref: '#/definitions/models.Bid'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.BidsResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.BidResponseDataSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.CategoriesResponseSchema:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Category'
        type: array
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.CreateBidSchema:
    properties:
      amount:
        example: 1000
        type: number
    required:
    - amount
    type: object
  schemas.EmailRequestSchema:
    properties:
      email:
        example: johndoe@email.com
        minLength: 5
        type: string
    required:
    - email
    type: object
  schemas.ListingDetailResponseDataSchema:
    properties:
      listing:
        $ref: '#/definitions/models.Listing'
      related_listings:
        items:
          $ref: '#/definitions/models.Listing'
        type: array
    type: object
  schemas.ListingDetailResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.ListingDetailResponseDataSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.ListingsResponseSchema:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Listing'
        type: array
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.LoginSchema:
    properties:
      email:
        example: johndoe@email.com
        type: string
      password:
        example: password
        type: string
    required:
    - email
    - password
    type: object
  schemas.ProfileResponseDataSchema:
    properties:
      avatar:
        type: string
      first_name:
        type: string
      last_name:
        type: string
    type: object
  schemas.ProfileResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.ProfileResponseDataSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.RefreshTokenSchema:
    properties:
      refresh:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6InNpbXBsZWlkIiwiZXhwIjoxMjU3ODk0MzAwfQ.Ys_jP70xdxch32hFECfJQuvpvU5_IiTIN2pJJv68EqQ
        type: string
    required:
    - refresh
    type: object
  schemas.RegisterResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.EmailRequestSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.ResponseSchema:
    properties:
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.ReviewsResponseSchema:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Review'
        type: array
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.SetNewPasswordSchema:
    properties:
      email:
        example: johndoe@example.com
        minLength: 5
        type: string
      otp:
        example: 123456
        type: integer
      password:
        example: newstrongpassword
        maxLength: 50
        minLength: 8
        type: string
    required:
    - email
    - otp
    - password
    type: object
  schemas.SiteDetailResponseSchema:
    properties:
      data:
        $ref: '#/definitions/models.SiteDetail'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.SubscriberResponseSchema:
    properties:
      data:
        $ref: '#/definitions/models.Subscriber'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.UpdateProfileResponseDataSchema:
    properties:
      file_upload_data:
        $ref: '#/definitions/utils.SignatureFormat'
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
    type: object
  schemas.UpdateProfileResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.UpdateProfileResponseDataSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.UpdateProfileSchema:
    properties:
      file_type:
        example: image/png
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
    required:
    - file_type
    - first_name
    - last_name
    type: object
  schemas.VerifyEmailRequestSchema:
    properties:
      email:
        example: johndoe@example.com
        minLength: 5
        type: string
      otp:
        example: 123456
        type: integer
    required:
    - email
    - otp
    type: object
  utils.ErrorResponse:
    properties:
      data:
        additionalProperties:
          type: string
        type: object
      message:
        type: string
      status:
        type: string
    type: object
  utils.SignatureFormat:
    properties:
      public_id:
        example: images/f47ac10b-58cc-4372-a567-0e02b2c3d479
        type: string
      signature:
        example: e1ba4683fbbf90b75ca22e9f8e545b18c6b24eae
        type: string
      timestamp:
        example: 1678828200
        type: integer
    type: object
info:
  contact: {}
  description: A simple bidding API built with Fiber
  title: Bidout Auction API
  version: "7.0"
paths:
  /api/v7/auctioneer:
    get:
      description: This endpoint gets the current user's profile.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ProfileResponseSchema'
      security:
      - BearerAuth: []
      summary: Get Profile
      tags:
      - Auctioneer
    put:
      description: 'This endpoint updates an authenticated user''s profile. Note:
        use the returned upload_url to upload avatar to cloudinary'
      parameters:
      - description: Update User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateProfileSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.UpdateProfileResponseSchema'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Profile
      tags:
      - Auctioneer
  /api/v7/auth/login:
    post:
      description: This endpoint generates new access and refresh tokens for authentication
      parameters:
      - description: User login
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/schemas.LoginSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - GuestUserAuth: []
      summary: Login a user
      tags:
      - Auth
  /api/v7/auth/logout:
    get:
      description: This endpoint logs a user out from our application
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout a user
      tags:
      - Auth
  /api/v7/auth/refresh:
    post:
      description: This endpoint refresh tokens by generating new access and refresh
        tokens for a user
      parameters:
      - description: Refresh token
        in: body
        name: refresh
        required: true
        schema:
          $ref: '#/definitions/schemas.RefreshTokenSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Refresh tokens
      tags:
      - Auth
  /api/v7/auth/register:
    post:
      description: This endpoint registers new users into our application.
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.RegisterResponseSchema'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Register a new user
      tags:
      - Auth
  /api/v7/auth/resend-verification-email:
    post:
      description: This endpoint resends new otp to the user's email.
      parameters:
      - description: Email object
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/schemas.EmailRequestSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Resend Verification Email
      tags:
      - Auth
  /api/v7/auth/send-password-reset-otp:
    post:
      description: This endpoint sends new password reset otp to the user's email.
      parameters:
      - description: Email object
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/schemas.EmailRequestSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Send Password Reset Otp
      tags:
      - Auth
  /api/v7/auth/set-new-password:
    post:
      description: This endpoint verifies the password reset otp.
      parameters:
      - description: Password reset object
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/schemas.SetNewPasswordSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Set New Password
      tags:
      - Auth
  /api/v7/auth/verify-email:
    post:
      description: This endpoint verifies a user's email.
      parameters:
      - description: Verify Email object
        in: body
        name: verify_email
        required: true
        schema:
          $ref: '#/definitions/schemas.VerifyEmailRequestSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Verify a user's email
      tags:
      - Auth
  /api/v7/general/reviews:
    get:
      description: This endpoint retrieves a few reviews of the application.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ReviewsResponseSchema'
      summary: Retrieve site reviews
      tags:
      - General
  /api/v7/general/site-detail:
    get:
      description: This endpoint retrieves few details of the site/application.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.SiteDetailResponseSchema'
      summary: Retrieve site details
      tags:
      - General
  /api/v7/general/subscribe:
    post:
      description: This endpoint creates a newsletter subscriber in our application
      parameters:
      - description: Subscriber object
        in: body
        name: subscriber
        required: true
        schema:
          $ref: '#/definitions/models.Subscriber'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.SubscriberResponseSchema'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Add a subscriber
      tags:
      - General
  /api/v7/listings:
    get:
      description: This endpoint retrieves all listings.
      parameters:
      - description: Listings Quantity
        in: query
        name: quantity
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ListingsResponseSchema'
      security:
      - BearerAuth: []
      - GuestUserAuth: []
      summary: Retrieve all listings
      tags:
      - Listings
  /api/v7/listings/categories:
    get:
      description: This endpoint retrieves all categories
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.CategoriesResponseSchema'
      summary: Retrieve all categories
      tags:
      - Listings
  /api/v7/listings/categories/{slug}:
    get:
      description: This endpoint retrieves all listings in a particular category.
        Use slug 'other' for category other
      parameters:
      - description: Category Slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ListingsResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Retrieve all listings by category
      tags:
      - Listings
  /api/v7/listings/detail/{slug}:
    get:
      description: This endpoint retrieves detail of a listing.
      parameters:
      - description: Listing Slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ListingDetailResponseSchema'
      summary: Retrieve listing's detail
      tags:
      - Listings
  /api/v7/listings/detail/{slug}/bids:
    get:
      description: This endpoint retrieves at most 3 bids from a particular listing.
      parameters:
      - description: Listing Slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.BidsResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Retrieve bids in a listing
      tags:
      - Listings
    post:
      description: This endpoint adds a bid to a particular listing.
      parameters:
      - description: Listing Slug
        in: path
        name: slug
        required: true
        type: string
      - description: Create Bid
        in: body
        name: amount
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateBidSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.BidResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add a bid to a listing
      tags:
      - Listings
  /api/v7/listings/watchlist:
    get:
      description: This endpoint retrieves all watchlist listings.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ListingsResponseSchema'
      security:
      - BearerAuth: []
      - GuestUserAuth: []
      summary: Retrieve all listings by users watchlist
      tags:
      - Listings
    post:
      description: This endpoint adds or removes a listing from a user's watchlist,
        authenticated or not.... As a guest, ensure to store guestuser_id in localstorage
        and keep passing it to header 'guestuserid' in subsequent requests
      parameters:
      - description: Add/Remove Watchlist
        in: body
        name: listing_slug
        required: true
        schema:
          $ref: '#/definitions/schemas.AddOrRemoveWatchlistSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.AddOrRemoveWatchlistResponseSchema'
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.AddOrRemoveWatchlistResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      - GuestUserAuth: []
      summary: Add or Remove listing from a users watchlist
      tags:
      - Listings
produces:
- application/json
securityDefinitions:
  BearerAuth:
    description: Type 'Bearer jwt_string' to correctly set the API Key
    in: header
    name: Authorization
    type: apiKey
  GuestUserAuth:
    description: For guest watchlists. Get ID (uuid) from '/api/v7/listings/watchlist'
      POST endpoint
    in: header
    name: GuestUserId
    type: apiKey
swagger: "2.0"
